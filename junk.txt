
//---------------------------
// MODEL_PLY
// loads a ply file
//---------------------------
class Model_PLY{
public:
	Model_PLY();	
	int LoadModel(char *filename);
	int LoadTexture(char* filename);
	
	void Draw();
	float* calculateNormal( float *coord1, float *coord2, float *coord3 );	
	
private:
    vector<Vec> vertBuffer;
    vector<Vec> normalBuffer;
    vector<Vec> uvBuffer;
	vector<face> faceBuffer;
	
	GsImage texture;
	
	int TotalVerticies;
	int TotalFaces;
};


//Model_PLY------------------------------------------------
Model_PLY::Model_PLY() {
    TotalVerticies = TotalFaces = 0;
}
float* Model_PLY::calculateNormal(float *coord1, float *coord2, float *coord3) {
    /* calculate Vector1 and Vector2 */
    float va[3], vb[3], vr[3], val;
    va[0] = coord1[0] - coord2[0];
    va[1] = coord1[1] - coord2[1];
    va[2] = coord1[2] - coord2[2];

    vb[0] = coord1[0] - coord3[0];
    vb[1] = coord1[1] - coord3[1];
    vb[2] = coord1[2] - coord3[2];

    /* cross product */
    vr[0] = va[1] * vb[2] - vb[1] * va[2];
    vr[1] = vb[0] * va[2] - va[0] * vb[2];
    vr[2] = va[0] * vb[1] - vb[0] * va[1];

    /* normalization factor */
    val = sqrt(vr[0] * vr[0] + vr[1] * vr[1] + vr[2] * vr[2]);

    float norm[3];
    norm[0] = vr[0] / val;
    norm[1] = vr[1] / val;
    norm[2] = vr[2] / val;


    return norm;
}
int Model_PLY::LoadModel(char* filename) {
    //test file name----
    string str(filename);
    if(str.find(".ply") == string::npos){
        return -1;
    }
    //------------------
    
    //open the file-----
    ifstream modelFile;
    modelFile.open(filename);
    if(!modelFile.good()){
        modelFile.close();
        return -2;
    }
    //------------------
    
    //skip the header---
    do{
        modelFile >> str;
        if(str.compare("vertex") == 0){
            modelFile >> TotalVerticies;
        }
        if(str.compare("face") == 0){
            modelFile >> TotalFaces;
        }
    }while(str.compare("end_header") != 0);
    
    cout << TotalFaces << endl << TotalVerticies << endl;
    //------------------
    
    //load verticies----
    float tx, ty, tz;
    
    for(int i = 0; i < TotalVerticies; i++){
        modelFile >> tx;
        modelFile >> ty;
        modelFile >> tz;
        vertBuffer.push_back(Vec(tx, ty, tz));
        modelFile >> tx;
        modelFile >> ty;
        modelFile >> tz;
        normalBuffer.push_back(Vec(tx, ty, tz));
        modelFile >> tx;
        modelFile >> ty;
        uvBuffer.push_back(Vec(tx, ty, 0));
    }
    //------------------
    
    //load faces--------
    int junk;
    face tf;
    for(int i = 0; i < TotalFaces; i++){
        modelFile >> junk;
        modelFile >> tf.ind[0];
        modelFile >> tf.ind[1];
        modelFile >> tf.ind[2];
        faceBuffer.push_back(tf);
    }
    //------------------
    
    modelFile.close();
}
int Model_PLY::LoadTexture(char* filename){
    texture.load(filename);
    cout << "-----" << texture.w() << " " <<  texture.h() << endl;
    return 1;
}
void Model_PLY::Draw() {
    glEnable(GL_TEXTURE_2D);
    texture.ogl_bind_texture();
    
    float x, y, z;
    glBegin(GL_TRIANGLES);
    for(int i = 0; i < TotalFaces; i++){
        for(int j = 0; j < 3; j++){
            x = normalBuffer[faceBuffer[i].ind[j]].x;
            y = normalBuffer[faceBuffer[i].ind[j]].y;
            z = normalBuffer[faceBuffer[i].ind[j]].z;
            glNormal3f(x, y, z);
            x = uvBuffer[faceBuffer[i].ind[j]].x;
            y = uvBuffer[faceBuffer[i].ind[j]].y;
            glTexCoord2f(x, y);
            x = vertBuffer[faceBuffer[i].ind[j]].x;
            y = vertBuffer[faceBuffer[i].ind[j]].y;
            z = vertBuffer[faceBuffer[i].ind[j]].z;
            glVertex3f(x, y, z);
        }        
    }
    glEnd();
    
    glDisable(GL_TEXTURE_2D);
}
//Model_PLY================================================





//---------------------------
// MODEL_OBJ
// Load an OBJ model. does not
// load normals, but calculates
// them.  Does not handle
// texture points
//===========================
class Model_OBJ {
public:
    Model_OBJ();
    float* calculateNormal(float* coord1, float* coord2, float* coord3);
    int Load(char *filename); // Loads the model
    void Draw(); // Draws the model on the screen
    void Release(); // Release the model

    float* normals; // Stores the normals
    float* Faces_Triangles; // Stores the triangles
    float* vertexBuffer; // Stores the points which make the object
    long TotalConnectedPoints; // Stores the total number of connected verteces
    long TotalConnectedTriangles; // Stores the total number of connected triangles

};











Model_OBJ::Model_OBJ() {
    this->TotalConnectedTriangles = 0;
    this->TotalConnectedPoints = 0;
}
float* Model_OBJ::calculateNormal(float *coord1, float *coord2, float *coord3) {
    /* calculate Vector1 and Vector2 */
    float va[3], vb[3], vr[3], val;
    va[0] = coord1[0] - coord2[0];
    va[1] = coord1[1] - coord2[1];
    va[2] = coord1[2] - coord2[2];

    vb[0] = coord1[0] - coord3[0];
    vb[1] = coord1[1] - coord3[1];
    vb[2] = coord1[2] - coord3[2];

    /* cross product */
    vr[0] = va[1] * vb[2] - vb[1] * va[2];
    vr[1] = vb[0] * va[2] - va[0] * vb[2];
    vr[2] = va[0] * vb[1] - vb[0] * va[1];

    /* normalization factor */
    val = sqrt(vr[0] * vr[0] + vr[1] * vr[1] + vr[2] * vr[2]);

    float norm[3];
    norm[0] = vr[0] / val;
    norm[1] = vr[1] / val;
    norm[2] = vr[2] / val;


    return norm;
}
int Model_OBJ::Load(char* filename) {
    string line;
    ifstream objFile(filename);
    if (objFile.is_open()) // If obj file is open, continue
    {
        objFile.seekg(0, ios::end); // Go to end of the file, 
        long fileSize = objFile.tellg(); // get file size
        objFile.seekg(0, ios::beg); // we'll use this to register memory for our 3d model

        vertexBuffer = (float*) malloc(fileSize); // Allocate memory for the verteces
        Faces_Triangles = (float*) malloc(fileSize * sizeof (float)); // Allocate memory for the triangles
        normals = (float*) malloc(fileSize * sizeof (float)); // Allocate memory for the normals

        int triangle_index = 0; // Set triangle index to zero
        int normal_index = 0; // Set normal index to zero

        while (!objFile.eof()) // Start reading file data
        {
            getline(objFile, line); // Get line from file

            if (line.c_str()[0] == 'v') // The first character is a v: on this line is a vertex stored.
            {
                line[0] = ' '; // Set first character to 0. This will allow us to use sscanf

                sscanf(line.c_str(), "%f %f %f ", // Read floats from the line: v X Y Z
                        &vertexBuffer[TotalConnectedPoints],
                        &vertexBuffer[TotalConnectedPoints + 1],
                        &vertexBuffer[TotalConnectedPoints + 2]);

                TotalConnectedPoints += POINTS_PER_VERTEX; // Add 3 to the total connected points
            }
            if (line.c_str()[0] == 'f') // The first character is an 'f': on this line is a point stored
            {
                line[0] = ' '; // Set first character to 0. This will allow us to use sscanf

                int vertexNumber[4] = {0, 0, 0};
                sscanf(line.c_str(), "%i%i%i", // Read integers from the line:  f 1 2 3
                        &vertexNumber[0], // First point of our triangle. This is an 
                        &vertexNumber[1], // pointer to our vertexBuffer list
                        &vertexNumber[2]); // each point represents an X,Y,Z.

                vertexNumber[0] -= 1; // OBJ file starts counting from 1
                vertexNumber[1] -= 1; // OBJ file starts counting from 1
                vertexNumber[2] -= 1; // OBJ file starts counting from 1


                /********************************************************************
                 * Create triangles (f 1 2 3) from points: (v X Y Z) (v X Y Z) (v X Y Z). 
                 * The vertexBuffer contains all verteces
                 * The triangles will be created using the verteces we read previously
                 */

                int tCounter = 0;
                for (int i = 0; i < POINTS_PER_VERTEX; i++) {
                    Faces_Triangles[triangle_index + tCounter ] = vertexBuffer[3 * vertexNumber[i] ];
                    Faces_Triangles[triangle_index + tCounter + 1 ] = vertexBuffer[3 * vertexNumber[i] + 1 ];
                    Faces_Triangles[triangle_index + tCounter + 2 ] = vertexBuffer[3 * vertexNumber[i] + 2 ];
                    tCounter += POINTS_PER_VERTEX;
                }

                /*********************************************************************
                 * Calculate all normals, used for lighting
                 */
                float coord1[3] = {Faces_Triangles[triangle_index], Faces_Triangles[triangle_index + 1], Faces_Triangles[triangle_index + 2]};
                float coord2[3] = {Faces_Triangles[triangle_index + 3], Faces_Triangles[triangle_index + 4], Faces_Triangles[triangle_index + 5]};
                float coord3[3] = {Faces_Triangles[triangle_index + 6], Faces_Triangles[triangle_index + 7], Faces_Triangles[triangle_index + 8]};
                float *norm = this->calculateNormal(coord1, coord2, coord3);

                tCounter = 0;
                for (int i = 0; i < POINTS_PER_VERTEX; i++) {
                    normals[normal_index + tCounter ] = norm[0];
                    normals[normal_index + tCounter + 1] = norm[1];
                    normals[normal_index + tCounter + 2] = norm[2];
                    tCounter += POINTS_PER_VERTEX;
                }

                triangle_index += TOTAL_FLOATS_IN_TRIANGLE;
                normal_index += TOTAL_FLOATS_IN_TRIANGLE;
                TotalConnectedTriangles += TOTAL_FLOATS_IN_TRIANGLE;
            }
        }
        objFile.close(); // Close OBJ file
    } else {
        cout << "Unable to open file";
    }
    return 0;
}
void Model_OBJ::Release() {
    free(this->Faces_Triangles);
    free(this->normals);
    free(this->vertexBuffer);
}
void Model_OBJ::Draw() {
    glEnableClientState(GL_VERTEX_ARRAY); // Enable vertex arrays
    glEnableClientState(GL_NORMAL_ARRAY); // Enable normal arrays
    glVertexPointer(3, GL_FLOAT, 0, Faces_Triangles); // Vertex Pointer to triangle array
    glNormalPointer(GL_FLOAT, 0, normals); // Normal pointer to normal array
    glDrawArrays(GL_TRIANGLES, 0, TotalConnectedTriangles); // Draw the triangles
    glDisableClientState(GL_VERTEX_ARRAY); // Disable vertex arrays
    glDisableClientState(GL_NORMAL_ARRAY); // Disable normal arrays
}


